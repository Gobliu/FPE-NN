import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import sys

# rc('text', usetex=True)
font = {'size': 16}
plt.rc('font', **font)
plt.rc('axes', linewidth=2)
legend_properties = {'weight': 'bold'}

# OU_g1 = np.load('/home/liuwei/GitHub/Result/ghp/gg_iter0_smooth.npy')
# OU_h1 = np.load('/home/liuwei/GitHub/Result/ghp/hh_iter0_smooth.npy')
# OU_g2 = np.load('/home/liuwei/GitHub/Result/ghp/gg_iter96_smooth.npy')
# OU_h2 = np.load('/home/liuwei/GitHub/Result/ghp/hh_iter96_smooth.npy')
# B_g1 = np.load('/home/liuwei/Cluster/Bessel/id2016_p10_win1717_0/iter0_gg_ng.npy')
# B_h1 = np.load('/home/liuwei/Cluster/Bessel/id2016_p10_win1717_0/iter0_hh_ng.npy')
# B_g2 = np.load('/home/liuwei/Cluster/Bessel/id2016_p10_win1717_0/iter68_gg_ng.npy')
# B_h2 = np.load('/home/liuwei/Cluster/Bessel/id2016_p10_win1717_0/iter68_hh_ng.npy')
# '/home/liuwei/GitHub/Result/{}/id{}_p{}_win{}{}_{}'.format(process, run_id, p_patience, recur_win_gh,
#                                                                        recur_win_p, run_)
B_g1 = np.load('/home/liuwei/GitHub/Result/Bessel/id10_p10_win1313_8/iter0_gg_ng.npy')
B_h1 = np.load('/home/liuwei/GitHub/Result/Bessel/id10_p10_win1313_8/iter0_hh_ng.npy')
B_g2 = np.load('/home/liuwei/GitHub/Result/Bessel/id10_p10_win1313_8/iter40_gg_ng.npy')
B_h2 = np.load('/home/liuwei/GitHub/Result/Bessel/id10_p10_win1313_8/iter40_hh_ng.npy')
# Boltz_g1 = np.load('/home/liuwei/GitHub/Result/ghp/iter0_gg_ng.npy')
# Boltz_h1 = np.load('/home/liuwei/GitHub/Result/ghp/iter0_hh_ng.npy')
# Boltz_g2 = np.load('/home/liuwei/GitHub/Result/ghp/iter215_gg_ng.npy')
# Boltz_h2 = np.load('/home/liuwei/GitHub/Result/ghp/iter215_hh_ng.npy')

x1 = np.linspace(-0.01, 0.1, num=110, endpoint=False)
OU_real_g = 2.86 * x1
OU_real_h = 0.0013 * np.ones(x1.shape)
x2 = np.linspace(0.1, 1.1, num=100, endpoint=False)
B_real_g = 1 / x2 - 0.2
B_real_h = 0.5 * np.ones(x2.shape)
x3 = np.linspace(0., 1., num=100, endpoint=False)
Boltz_real_g = x3 - 1
Boltz_real_h = 0.2 * x3 ** 2

print((np.sum((B_real_g[6:81] - B_g2[6:81])**2) / np.sum(B_real_g[6:81]**2)))
print((np.sum((B_real_h[6:81] - B_h2[6:81])**2) / np.sum(B_real_h[6:81]**2)))
plt.figure(figsize=[24, 18])
# plt.subplots_adjust(top=0.95, bottom=0.1, left=0.075, right=0.95, wspace=0.25, hspace=0.2)
# ax = plt.subplot(2, 3, 1)
# plt.text(-0.1, 1.10, 'A', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
# plt.plot(x1[16:110], OU_real_g[16:110], 'k-', linewidth=3, label='True')
# plt.scatter(x1[16:110], OU_g1[16:110], c='b', marker='+', s=50, label='untrained P')
# plt.scatter(x1[16:110], OU_g2[16:110], c='r', marker='d', s=50, label='trained P')
# # plt.scatter(b_x, b_lsq_g, c='r', marker='d', s=100, label='LLS')
# plt.tick_params(direction='in', width=3, length=6)
# plt.xticks(np.arange(0.01, 0.091, 0.02), fontweight='bold')
# plt.yticks(fontweight='bold')
# plt.ylim(-0.05, 0.4)
# plt.yticks(np.arange(-0.00, 0.31, 0.1), fontweight='bold')
# plt.legend(loc='upper left', bbox_to_anchor=[0.05, 0.85], ncol=1)
# ax.text(.5, .9, 'OU', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
# plt.ylabel('g',  fontweight='bold')
# plt.xlabel('x',  fontweight='bold')
#
# ax = plt.subplot(2, 3, 4)
# plt.text(-0.1, 1.10, 'D', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
# plt.plot(x1[16:110], OU_real_h[16:110] * 1000, 'k-', linewidth=3, label='True')
# plt.scatter(x1[16:110], OU_h1[16:110] * 1000, c='b', marker='+', s=50, label='untrained P')
# plt.scatter(x1[16:110], OU_h2[16:110] * 1000, c='r', marker='d', s=50, label='trained P')
# # plt.scatter(b_x, b_lsq_g, c='r', marker='d', s=100, label='LLS')
# plt.tick_params(direction='in', width=3, length=6)
# plt.xticks(np.arange(0.01, 0.091, 0.02), fontweight='bold')
# plt.yticks(fontweight='bold')
# plt.ylim(-0.3, 4)
# plt.yticks(np.arange(0, 4, 1), fontweight='bold')
# plt.legend(loc='upper left', bbox_to_anchor=[0.50, 0.90], ncol=1)
# ax.text(.5, .9, 'OU', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
# plt.ylabel('h(1E-4)',  fontweight='bold')
# plt.xlabel('x',  fontweight='bold')
#
ax = plt.subplot(2, 3, 2)
plt.text(-0.1, 1.10, 'B', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
plt.plot(x2[6:81], B_real_g[6:81], 'k-', linewidth=3, label='True')
plt.scatter(x2[6:81], B_g1[6:81], c='b', marker='+', s=50, label='FPE NN')
plt.scatter(x2[6:81], B_g2[6:81], c='r', marker='d', s=50, label='FPE NN')
plt.tick_params(direction='in', width=3, length=6)
plt.xticks(np.arange(0.10, 1.11, 0.5), fontweight='bold')
plt.yticks(fontweight='bold')
plt.legend(loc='upper left', bbox_to_anchor=[0.55, 0.85], ncol=1)
ax.text(.5, .9, 'Bessel', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
plt.ylabel('g',  fontweight='bold')
plt.xlabel('x',  fontweight='bold')

ax = plt.subplot(2, 3, 5)
plt.text(-0.1, 1.10, 'E', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
plt.plot(x2[6:81], B_real_h[6:81], 'k-', linewidth=3, label='True')
plt.scatter(x2[6:81], B_h1[6:81], c='b', marker='+', s=50, label='FPE NN')
plt.scatter(x2[6:81], B_h2[6:81], c='r', marker='d', s=50, label='LLS')
plt.tick_params(direction='in', width=3, length=6)
plt.xticks(np.arange(0.10, 1.11, 0.5), fontweight='bold')
plt.yticks(fontweight='bold')
# plt.ylim(4.995, 5.011)
plt.yticks(np.arange(5.00, 5.02, 0.01), fontweight='bold')
plt.legend(loc='upper left', bbox_to_anchor=[0.55, 0.85], ncol=1)
ax.text(.5, .9, 'Bessel', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
plt.ylabel('h (1E-1)',  fontweight='bold')
plt.xlabel('x',  fontweight='bold')

# ax = plt.subplot(2, 3, 3)
# plt.text(-0.1, 1.10, 'C', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
# plt.plot(x3[14:88], Boltz_real_g[14:88], 'k-', linewidth=3, label='True')
# plt.scatter(x3[14:88], Boltz_g1[14:88], c='b', marker='+', s=100, label='untrained P')
# plt.scatter(x3[14:88], Boltz_g2[14:88], c='r', marker='d', s=50, label='trained P')
# plt.tick_params(direction='in', width=3, length=6)
# plt.xticks(np.arange(0.20, 0.90, 0.2), fontweight='bold')
# plt.ylim(-2.2, 0.3)
# plt.yticks(np.arange(-2.00, 0.1, 0.5), fontweight='bold')
# plt.legend(loc='upper left', bbox_to_anchor=[0.05, 0.45], ncol=1)
# ax.text(.5, .9, 'Wealth', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
# plt.ylabel('g',  fontweight='bold')
# plt.xlabel('x',  fontweight='bold')
#
# ax = plt.subplot(2, 3, 6)
# plt.text(-0.1, 1.10, 'F', fontsize=20, transform=ax.transAxes, fontweight='bold', va='top')
# plt.plot(x3[14:88], Boltz_real_h[14:88] * 10, 'k-', linewidth=3, label='True')
# plt.scatter(x3[14:88], Boltz_h1[14:88] * 10, c='b', marker='+', s=50, label='untrained P')
# plt.scatter(x3[14:88], Boltz_h2[14:88] * 10, c='r', marker='d', s=50, label='trained P')
# plt.tick_params(direction='in', width=3, length=6)
# plt.xticks(np.arange(0.20, 0.90, 0.2), fontweight='bold')
# plt.yticks(fontweight='bold')
# plt.ylim(-0.2, 1.8)
# plt.yticks(np.arange(0.00, 1.9, 0.5), fontweight='bold')
# plt.legend(loc='upper left', bbox_to_anchor=[0.05, 0.85], ncol=1)
# ax.text(.5, .9, 'Wealth', horizontalalignment='center', transform=ax.transAxes, fontweight='bold')
# plt.ylabel('h (1E-1)',  fontweight='bold')
# plt.xlabel('x',  fontweight='bold')
plt.show()

# print(np.sum((OU_g - OU_real_g)**2)/np.sum(OU_real_g**2))
# print(np.sum((OU_h - OU_real_h)**2)/np.sum(OU_real_h**2))
# print(np.sum((B_g - B_real_g)**2)/np.sum(B_real_g**2))
# print(np.sum((B_h - B_real_h)**2)/np.sum(B_real_h**2))
# print(np.sum((Boltz_g - Boltz_real_g)**2)/np.sum(Boltz_real_g**2))
# print(np.sum((Boltz_h - Boltz_real_h)**2)/np.sum(Boltz_real_h**2))
# print(B_h)
